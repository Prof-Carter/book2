clear

n = 3;  // 与えられたデータ数（標本点の数）：n+1 個

x_data = [-3 -1   3   6]; // [x1 x2 x3 x4]
y_data = [-5 20 -15 -10]; // [y1 y2 y3 y4]

// 自然な３次のスプライン関数の導出（ここから）//////////////////////////////////
A = [ x_data(1)^3  x_data(1)^2  x_data(1)  1  0  0  0  0  0  0  0  0  
      x_data(2)^3  x_data(2)^2  x_data(2)  1  0  0  0  0  0  0  0  0  
      0  0  0  0  x_data(2)^3  x_data(2)^2  x_data(2)  1  0  0  0  0 
      0  0  0  0  x_data(3)^3  x_data(3)^2  x_data(3)  1  0  0  0  0  
      0  0  0  0  0  0  0  0  x_data(3)^3  x_data(3)^2  x_data(3)  1  
      0  0  0  0  0  0  0  0  x_data(4)^3  x_data(4)^2  x_data(4)  1  
      // ------------------------------------------------------------------
      3*x_data(2)^2  2*x_data(2)  1  0  -3*x_data(2)^2  -2*x_data(2) ...
            -1  0  0  0  0  0
      0  0  0  0  3*x_data(3)^2  2*x_data(3)  1  0 ...
            -3*x_data(3)^2  -2*x_data(3)  -1  0
      // ------------------------------------------------------------------
      6*x_data(2)  2  0  0  -6*x_data(2)  -2  0  0  0  0  0  0  
      0  0  0  0  6*x_data(3)  2  0  0  -6*x_data(3)  -2  0  0  
      // ------------------------------------------------------------------
      6*x_data(1)  2  0  0  0  0  0  0  0  0  0  0 
      0  0  0  0  0  0  0  0  6*x_data(4)  2  0  0 ];

b = [ y_data(1)
      y_data(2)
      y_data(2)
      y_data(3)
      y_data(3)
      y_data(4)
      // -----------
      0
      0
      // -----------
      0
      0
      // -----------
      0
      0 ];
      
p = A\b;   // 連立１次方程式を解く
 
a(1) = p( 1);  b(1) = p( 2);  c(1) = p( 3);  d(1) = p( 4);
a(2) = p( 5);  b(2) = p( 6);  c(2) = p( 7);  d(2) = p( 8);
a(3) = p( 9);  b(3) = p(10);  c(3) = p(11);  d(3) = p(12);

printf("\n")

for i = 1:3     // ３次のスプライン関数の係数を表示
  printf("a%d = %f\n",   i, a(i));
  printf("b%d = %f\n",   i, b(i));
  printf("c%d = %f\n",   i, c(i));
  printf("d%d = %f\n\n", i, d(i));
end

deff('[y] = f1(x)', 'y = a(1)*x.^3 + b(1)*x.^2 + c(1)*x + d(1)');
deff('[y] = f2(x)', 'y = a(2)*x.^3 + b(2)*x.^2 + c(2)*x + d(2)');
deff('[y] = f3(x)', 'y = a(3)*x.^3 + b(3)*x.^2 + c(3)*x + d(3)');
// 自然な３次のスプライン関数の導出（ここまで）//////////////////////////////////

// 補外の１次関数の導出（ここから）////////////////////////////////////////////
c0   = 3*a(1)*x_data(1)^2 + 2*b(1)*x_data(1) + c(1);
c(4) = 3*a(3)*x_data(4)^2 + 2*b(3)*x_data(4) + c(3);

d0   = y_data(1) -   c0*x_data(1);
d(4) = y_data(4) - c(4)*x_data(4);

printf("c0 = %f\n",   c0);
printf("d0 = %f\n\n", d0);

printf("c4 = %f\n",   c(4));
printf("d4 = %f\n\n", d(4));

deff('[y] = f0(x)', 'y =   c0*x + d0');
deff('[y] = f4(x)', 'y = c(4)*x + d(4)');
// 補外の１次関数の導出（ここまで）////////////////////////////////////////////

// 推定値の算出（ここから）///////////////////////////////////////////////////
num = 0;
x = -3.5:0.25:6.5; // 推定値の x 座標

for i=1:size(x,2)
  num = num + 1;
  if x(num)<=x_data(1)
    y(num) = f0(x(num));    
  elseif x_data(1)<=x(num) & x(num)<=x_data(2)
    y(num) = f1(x(num));
  elseif x_data(2)<=x(num) & x(num)<=x_data(3)
    y(num) = f2(x(num));
  elseif x_data(3)<=x(num) & x(num)<=x_data(4)
    y(num) = f3(x(num));
  elseif x_data(4)<=x(num)
    y(num) = f4(x(num));
  end

  printf("x = %f, y = %f\n", x(num), y(num));   // 推定値の表示
end
// 推定値の算出（ここまで）///////////////////////////////////////////////////

// グラフの描画 ////////////////////////////////////////////////////////////
clf;                                      // グラフィックの消去
plot(x_data,y_data,'ro','linewidth',3,'markersize',12);
                  // 標本点の描画（色：赤，印：○，線の太さ：3，印の大きさ：12）
plot(x,y,'b','linewidth',3); 
                  // 推定値の描画（色：青，線の太さ：3）   
xgrid;                                    // グリッドラインの追加         
xlabel('x');                              // 横軸のラベル
ylabel('y');                              // 縦軸のラベル

graph = gca();                  // 軸のハンドル（個々を認識する番号）を取得
graph.font_style = 2;           // 目盛りのフォント（2: times）
graph.font_size  = 4;           // 目盛りのフォントサイズ（0〜6まで設定可能）
graph.x_label.font_style = 3;   // 横軸のラベルのフォント（3: times italic）
graph.x_label.font_size  = 5;   // 横軸のラベルのフォントサイズ（0〜6まで設定可能）
graph.y_label.font_style = 3;   // 縦軸のラベルのフォント（3: times italic）
graph.y_label.font_size  = 5;   // 縦軸のラベルのフォントサイズ（0〜6まで設定可能）
graph.data_bounds = [-4 -25; 8 25];   // [xmin ymin; xmax ymax]
//////////////////////////////////////////////////////////////////////////
